/*
Постановка задачи
Реализовать на языке С++ класс для представления строки в качестве
удобного объекта (свой std::string). Для хранения строки можно использовать Си-
строки (char *), для их обработки можно использовать функции из cstring. Особое
внимание нужно обратить на перегрузку операторов.
Поведение должно напоминать std::string. По ссылке можно посмотреть
используемые в стандартной библиотеке прототипы функций.
Про перегрузку можно найти информацию здесь: википедия, статья.
При работе с Си-строками желательно использовать специальные функции:
● strlen(str) - возвращает длину строки str без учета ‘\0’.
● strcpy(str1, str2) - копирует str2 в str1 вместе с ‘\0’, но за выделение памяти отвечает программист.
● strcmp(str1, str2) - сравнивает строки, если одинаковые, то вернет 0.

Требования
● Создан класс для представления строки (хранит длину строки и саму строку).
● Реализованы конструкторы: по умолчанию, с параметром const char*, копирования.
● Реализован деструктор.
● Операции со строкой:
    ○ вернуть длину строки
    ○ вернуть строку (const char*)
    ○ дополнительные функции приветствуются
● Перегружены операторы:
    ○ ввода и вывода в поток (>>, <<)
    ○ присваивания (=) для работы с вашим классом
    ○ сравнения (==, !=)
    ○ доступа по индексу ([])
    ○ сложения как конкатенация строк (+=, +)
● В функции main привести пример работы со строкой. Наличие тестов приветствуется.
● Дополнительно:
    ○ реализовать поддержку инициализации через отдельный символ char
    ○ реализовать поддержку Си-строк и отдельных символов в операторах =, +=, +
    ○ дополнительный функционал для работы со строками (поиск, вставка, итераторы...)
*/
#include "MyString.h"

int main() {
    MyString s = "Hello"; // конструктор копирования C-строки
    MyString t = 'a'; // конструктор копирования символа
    MyString u;       // конструктор по умолчанию
    MyString v((t)); // конструктор копирования

    bool bSeqMyStr = s == t;         // Оператор сравнения
    bool bSNotEqMyStr = s != t;      // Оператор неравенства
    bool bSeqCStr = s == "Hello";    // Оператор сравнения с C-строкой
    bool bSNotEqCStr = s != "Hello"; // Оператор неравенства с C-строкой
    bool bSeqChar = s == 'a';        // Оператор сравнения с символом
    bool bSNotEqCHar = s != 'c';     // Оператор неравенства с символом

    MyString a = s + v; // оператор плюс
    MyString b = s + 'c'; // оператор плюс для символа
    MyString c = s + " world"; // оператор плюс для C-строки

    s = 'c'; // оператор присваивания
    s = t; // оператор присваивания
    s = "Hello WOrld"; // оператор присваивания

    s[1] = 'a'; // оператор индексирования

    return 0;
}
